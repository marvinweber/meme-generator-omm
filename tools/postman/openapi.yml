openapi: 3.0.0
info:
  title: OMM Meme Generator Backend
  description: API Specification of the OMM Meme Generator Backend
  version: '1.0.0'
servers:
  - url: http://localhost:3050
    description: Local Development Backend Server
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: Auth
  - name: Memes
  - name: Memes > Create/Delete Meme
  - name: Memes > Retrieve Memes and Meme Info
  - name: Memes > Meme Drafts
  - name: Memes > Meme Interactions
  - name: Templates
  - name: User
paths:
  /auth/me:
    get:
      tags:
        - Auth
      summary: Get logged-in User (Me)
      description: >-
        Endpoint to get information about the currently logged-in user.
        Authentication required, of course.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register with E-Mail and Password
      description: Create a new account for given name, email, and password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Darth Vader
                email: darth@vader.com
                password: '1234'
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login with E-Mail and Password
      description: Login and create/request a JWT Token for email and password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: marvin@marvinweber.net
                password: '1234'
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/file:
    post:
      tags:
        - Memes > Create/Delete Meme
      summary: Create Meme by File Upload
      description: >-
        Create a new Meme by uploading the Meme image file.


        Additional info may be provided in the Request body:


        *   Name (string): Title/Name of the Meme

        *   Tags & Captions (JSON stringified Lists/Arrays): List of Tags and
        the Captions of the Meme

        *   Template (string/ objectId): The id of the template, if known (can
        be ommitted)
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                meme:
                  type: string
                  description: Meme-Image to Upload
                  format: binary
                name:
                  type: string
                  description: Name / Title of the Meme
                  example: Meme Name
                tags:
                  type: string
                  description: Tags for the Meme ("JSON stringified array")
                  example: '["tag1","tag2"]'
                captions:
                  type: string
                  description: Captions of the Meme ("JSON stringified array")
                  example: '["some caption text","another caption"]'
                template:
                  type: string
                  description: ID of the template used (if known)
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/config:
    post:
      tags:
        - Memes > Create/Delete Meme
      summary: Create Meme by Config
      description: >-
        Create a new Meme by uploading the Meme configuration.


        Body (JSON formatted) goes as follows:


        ``` json

        {
            "memeConfigs": [
                {
                    "templateId": "61f70d9c6378875975653b4f", // define template ID (no meme will be created, if id does not exist)
                    "maxFileSize": 50, // optional: specify maximum filesize in KBs
                    "title": "A new meme, no idea for a title!", // a title for the meme
                    "tags": ["tag1", "meme", "dog"], // optional: add some tags
                    "texts": [ // your captions (only text is obligatory, rest is optional)
                        {
                            "text": "First caption in red!",
                            "xPos": 80,
                            "yPos": 50,
                            "size": 50,
                            "italic": true,
                            "color": "red"
                        },
                        {
                            "text": "CAPTION 2!",
                            "fontFamily": "Comic Sans MS",
                            "xPos": 190,
                            "yPos": 350,
                            "size": 80,
                            "bold": true,
                            "color": "#4ec9b0"
                        }
                    ]
                },
                {
                    "templateUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Hauskatze_langhaar.jpg/1280px-Hauskatze_langhaar.jpg", // instead of Template ID: you may also just provide a image url
                    "title": "Funny Cat!", // a title for the meme
                    "tags": ["tag1", "meme", "cat"], // optional: add some tags
                    "texts": [ // your captions (only text is obligatory, rest is optional)
                        {
                            "text": "Hi",
                            "xPos": 300,
                            "yPos": 70,
                            "size": 50,
                            "italic": true,
                            "color": "red"
                        },
                        {
                            "text": "I AM A CAT!",
                            "fontFamily": "Comic Sans MS",
                            "xPos": 300,
                            "yPos": 800,
                            "size": 80,
                            "bold": true,
                            "color": "#4ec9b0"
                        }
                    ]
                }
            ]
        }


        ```


        One entry in the memeConfigs for every meme to create.


        ### Font Families


        The following font families should be supported:


        *   Arial

        *   Brush Script MT

        *   Cambria

        *   Comic Sans MS

        *   Courier New

        *   Garamond

        *   Georgia

        *   Helvetica

        *   Tahoma

        *   Trebuchet MS

        *   Verdana
            

        ### Colors


        Colors can either be given by canoncial names (e.g., "red", "blue",
        ...), or by their HEX code (e.g.; "#1234f1").


        ### Size of the Meme


        The size of the meme is defined by the image size of the template.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                memeConfigs:
                  - templateId: 61f70d9c6378875975653b4f
                    maxFileSize: 50
                    title: A new meme, no idea for a title!
                    tags:
                      - tag1
                      - meme
                      - dog
                    texts:
                      - text: First caption in red!
                        xPos: 80
                        yPos: 50
                        size: 50
                        italic: true
                        color: red
                      - text: CAPTION 2!
                        fontFamily: Comic Sans MS
                        xPos: 190
                        yPos: 350
                        size: 80
                        bold: true
                        color: '#4ec9b0'
                  - templateUrl: >-
                      https://i2.pickpik.com/photos/600/698/553/cat-winter-cold-snow-preview.jpg
                    title: Funny Cat!
                    tags:
                      - tag1
                      - meme
                      - cat
                    texts:
                      - text: Hi
                        xPos: 300
                        yPos: 70
                        size: 50
                        italic: true
                        color: red
                      - text: I AM A CAT!
                        fontFamily: Comic Sans MS
                        xPos: 200
                        yPos: 400
                        size: 80
                        bold: true
                        color: '#4ec9b0'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}:
    delete:
      tags:
        - Memes > Create/Delete Meme
      summary: Delete a Meme
      description: >-
        Delete the specified meme. This is only allowed for memes uploaded/
        created by the authenticated user.
      parameters:
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          example: 61fda196b28569ee2f595f34
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/:
    get:
      tags:
        - Memes > Retrieve Memes and Meme Info
      summary: Get all Memes
      description: >-
        Get a list of memes.


        Sorting by the following fields is supported:


        *   createdAt

        *   viewCount

        *   commentCount

        *   likeCount
            

        Filtering for title, tags, captions can be done by providing one or more
        strings to search for in the respective fields.


        Filter by Template and Owner (user uploaded the meme) is done by
        providing a search string which is search in the name of the
        template/user. Only memes made from templates/ users whose name includes
        the search string are returned.


        Numerical filtering supported for:


        *   viewCount

        *   likeCount

        *   commentCount
            

        Supported operation for numerical filters (and the createdAt filter):


        *   $lt: lower than

        *   $tle: lower, or equal than

        *   $gte: greater, or equal than

        *   $gt: greater than
            

        See example for how to send the filters.
      security:
        - noauthAuth: []
      parameters:
        - name: p
          in: query
          schema:
            type: integer
          description: Page to get (defaults to first page)
          example: '1'
        - name: perPage
          in: query
          schema:
            type: integer
          description: Memes to get per page (defaults to 30)
          example: '10'
        - name: sort[createdAt]
          in: query
          schema:
            type: string
          description: Sort by de date of creation.
          example: desc
        - name: sort[viewCount]
          in: query
          schema:
            type: string
          description: Sort by the view count.
          example: desc
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}/:
    get:
      tags:
        - Memes > Retrieve Memes and Meme Info
      summary: Get specific Meme
      description: Get details about one specific Meme.
      security:
        - noauthAuth: []
      parameters:
        - name: countView
          in: query
          schema:
            type: boolean
          description: >-
            Parameter to control whether the call should be counted as view.
            (must be "true" to be considered set)
          example: 'true'
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          description: >-
            ID of the Meme to retrieve information/data for (comments, likes,
            etc.)
          example: 61f70b696c190d7f30a03d96
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}/previous:
    get:
      tags:
        - Memes > Retrieve Memes and Meme Info
      summary: Get Previous Meme
      description: Get the previous (wrt. upload time) meme of the specified one.
      security:
        - noauthAuth: []
      parameters:
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          description: ID of the Meme to get the PREVIOUS Meme for.
          example: 61faab34bfb44a016fb31761
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}/next:
    get:
      tags:
        - Memes > Retrieve Memes and Meme Info
      summary: Get Next Meme
      description: Get the previous (wrt. upload time) meme of the specified one.
      security:
        - noauthAuth: []
      parameters:
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          description: ID of the Meme to get the NEXT Meme for.
          example: 61faab34bfb44a016fb31761
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/random:
    get:
      tags:
        - Memes > Retrieve Memes and Meme Info
      summary: Get random Meme
      description: Get a random Meme from all Memes.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}/stats:
    get:
      tags:
        - Memes > Retrieve Memes and Meme Info
      summary: Get Meme Stats
      description: |-
        Get statistics (over time) for given meme (id).

        Statistics include:

        *   View, Likes, Comments per Day
        *   Cummulated Views, Likes, Comment Count
      security:
        - noauthAuth: []
      parameters:
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          description: ID of the Meme to retrieve stats for.
          example: 61fff5be6950e5daaf81cd3e
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/drafts:
    post:
      tags:
        - Memes > Meme Drafts
      summary: Create a Meme Draft
      description: >-
        Create and Save a new Meme Draft for the authenticated user. The
        memeConfig must be a "json-stringified" object implementing the
        MemeConfig Schema / Interface of the Frontend.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: My Draft
                templateUrl: url to the template
                templateId: id of the template used
                memeConfig: >-
                  {"texts":[{"text":"New
                  Text","size":80,"xPos":3,"yPos":80,"fontFamily":"Arial"}]}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Memes > Meme Drafts
      summary: Get Meme Drafts
      description: Get Meme Drafts of the authenticated user.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/drafts/{draftId}:
    delete:
      tags:
        - Memes > Meme Drafts
      summary: Create a Meme Draft Copy
      description: >-
        Delete a Meme draft. This only is allowed for meme drafts created by the
        authenticated user.
      security:
        - noauthAuth: []
      parameters:
        - name: draftId
          in: path
          schema:
            type: string
          required: true
          description: ID of the draft to delete.
          example: 6204da5dad579efb9f3c04ed
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}/comment:
    post:
      tags:
        - Memes > Meme Interactions
      summary: Comment on Meme
      description: Create a new comment on the specified meme.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                comment: Here goes the nice comment!
      parameters:
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          description: ID of the Meme to post a comment to.
          example: 61f70b696c190d7f30a03d96
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}/like:
    post:
      tags:
        - Memes > Meme Interactions
      summary: Like a Meme
      description: >-
        Like the specified meme. If the user has liked the meme already before,
        this call has no effect.
      requestBody:
        content: {}
      parameters:
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          description: ID of the Meme to like.
          example: 61fda196b28569ee2f595f34
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /memes/{memeId}/unlike:
    post:
      tags:
        - Memes > Meme Interactions
      summary: Unlike a Meme
      description: >-
        Unlike the specified meme. If the user has not liked the meme before,
        this call has no effect.
      requestBody:
        content: {}
      parameters:
        - name: memeId
          in: path
          schema:
            type: string
          required: true
          description: ID of the meme to unlike.
          example: 61f70b696c190d7f30a03d96
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /templates/upload/file:
    post:
      tags:
        - Templates
      summary: Create Template by File Upload
      description: Upload a new Template Image that can be used for creating memes.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  description: Template Image File.
                  format: binary
                name:
                  type: string
                  description: Name of the Template.
                  example: Template Name
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /templates/upload/url:
    post:
      tags:
        - Templates
      summary: Create Template from Image URL
      description: >-
        Upload/Create new Template by provding an image url from where it can be
        downloaded. The downloaded Template can be used for new Memes,
        afterwards.


        Within the JSON-Body, provide the `templateUrl` (URL from where to
        download the Image), and optionally a `name` for the Template (see
        example request).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                templateUrl: https://picfiles.alphacoders.com/311/311202.jpg
                name: Ein Katzentemplate!
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /templates:
    get:
      tags:
        - Templates
      summary: Get all Templates
      description: Get a list of all available templates.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /templates/{templateId}:
    delete:
      tags:
        - Templates
      summary: Delete a Template
      description: >-
        Delete the specified template. This is only allowed for templates
        uploaded by the authenticated user.
      parameters:
        - name: templateId
          in: path
          schema:
            type: string
          required: true
          description: ID of the Template to delete.
          example: 6204da5dad579efb9f3c04ed
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/memes:
    get:
      tags:
        - User
      summary: Get User Memes
      description: Get a list of all memes created by the authenticated user.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /user/templates:
    get:
      tags:
        - User
      summary: Get User Templates
      description: Get a list of all templates uploaded by the authenticated user.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
